name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm  # Path of the folder that needs to be cached by github
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}         # Helps retrieve the cache, and discard it if needed
          # **/package-lock.json all these files are collected and hash is created. If the lock file changes, new hash aka new cache, old cache discarded
      - name: Install dependencies  # Above step cached it. If .npm is present, this step will reuse it else it will install it like usual
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}   # Declare job output - steps.<id>.outputs.<variable name declared in id>
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies  # This is the same cache as above aka a central cache. It is not specific to the job
        uses: actions/cache@v4
        with:
          path: ~/.npm  
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}  
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build # Produces artifacts
      - name: Publish JS Filename # Job output task
        id: publish # publish name is your choice, this is a unique id used in "outputs" attribute
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'   # Outputs file name index.<number>.js - a file in dist/assets
        # script-file is the any name of our choice
        # ={} this is the value for script-file
        # $GITHUB_OUTPUT - This targets a special file created by github in the environment where our job runs. This file has output variables 
        #### OR ####
        # run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' ';'
        # Above is another way to set output - this will be deprecated
      - name: Upload artifacts  
        uses: actions/upload-artifact@v4 # We will use pre defined action here
        with: 
          name: dist-files # Name of the artifact that will be uploaded
          path: |
            dist
            package.json
  deploy:               # This step will run on a different machine
    needs: build        # Required because artifact needs to be generated
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo ${{ needs.build.outputs.script-file }} # needs contain the outputs of all the jobs that are defined as a dependency of the current job, in this case: build job
      - name: Deploy
        run: echo "Deploying..."
